apply plugin: 'com.android.library'
apply from: 'version.gradle'
apply from: 'code_coverage.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        disable 'AppLinksAutoVerifyError'
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    /* Android */
    compile 'com.android.support:appcompat-v7:26.1.0'

    provided 'com.google.auto.value:auto-value:1.5'
    annotationProcessor 'com.google.auto.value:auto-value:1.5'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'

    /* testing */
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.2.2'
    testCompile 'org.robolectric:shadows-play-services:3.2.2'
    testCompile 'org.robolectric:shadows-support-v4:3.2.2'
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support.test:rules:1.0.1'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'

    compile 'com.github.comapi:comapi-sdk-android:dev-SNAPSHOT'
}


/*

    Generate Maven release files
    ./gradlew clean build generateRelease

*/

apply plugin: 'signing'
apply plugin: 'maven'

def groupId = 'com.comapi'
def artifactId = 'chat'
def version = chatVersion
def comapiUrl = 'http://www.comapi.com/'
def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc, overwrite: true) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

uploadArchives {

    repositories.mavenDeployer {

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version
        pom.project {

            packaging 'aar'

            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                    distribution 'repo'
                }
            }
            name 'Comapi'
            description 'Adapts Comapi Foundation SDK providing it with logic useful for building chat application. '
            url comapiUrl

            developers {
                developer {
                    id 'marcinswierczek'
                    name 'Marcin Swierczek';
                    email 'sdk@comapi.com';
                }
            }

            scm {
                url 'https://github.com/comapi/comapi-chat-sdk-android'
                connection 'scm:git:https://github.com/comapi/comapi-chat-sdk-android.git'
                developerConnection 'scm:git:https://github.com/comapi/comapi-chat-sdk-android.git'
            }
        }

        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")
    }
}

/**
 * To avoid conflict with Jcentre autogenerated files
 */
task removeMavenMetatdata(type: Delete) {
    delete fileTree(dir: "${localReleaseDest}/com/comapi/chat", exclude: "${version}")
}

task zipRelease(type: Zip) {
    from "${localReleaseDest}"
    destinationDir buildDir
    archiveName "chat-${artifactId}-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/chat-release-${version}.zip"
}

signing {
    required { isReleaseVersion || hasProperty("teamcity") }
    sign configurations.archives
}

if (hasProperty("teamcity")) {
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it instanceof Sign }) {

            def id = System.getenv("keyid")
            def file = System.getenv("secretkeyringfile")
            def password = System.getenv("donkypassword")

            allprojects { ext."signing.keyId" = id }
            allprojects { ext."signing.secretKeyRingFile" = file }
            allprojects { ext."signing.password" = password }

        }
    }
}

generateRelease.dependsOn(uploadArchives)
zipRelease.dependsOn(removeMavenMetatdata)
generateRelease.dependsOn(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

apply plugin: 'me.tatarka.retrolambda'
retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}